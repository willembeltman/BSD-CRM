@page "/account/register"
@using System.ComponentModel.DataAnnotations
@using BSD.Shared.RequestDtos
@using BSD.Business.Interfaces
@inject NavigationManager NavigationManager
@inject IAuthenticationService AuthenticationService

<PageTitle>Register</PageTitle>

<h1>Register</h1>

@if (!string.IsNullOrEmpty(ErrorMessage))
{
    <div class="alert alert-danger">@ErrorMessage</div>
}

<EditForm Model="@registerModel" OnValidSubmit="RegisterClicked">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="mb-3">
        <label for="username" class="form-label">Username</label>
        <InputText id="username" class="form-control" @bind-Value="registerModel.UserName" />
        <ValidationMessage For="@(() => registerModel.UserName)" />
    </div>

    <div class="mb-3">
        <label for="email" class="form-label">Email</label>
        <InputText id="email" type="email" class="form-control" @bind-Value="registerModel.Email" />
        <ValidationMessage For="@(() => registerModel.Email)" />
    </div>

    <div class="mb-3">
        <label for="password" class="form-label">Password</label>
        <InputText id="password" type="password" class="form-control" @bind-Value="registerModel.Password" />
        <ValidationMessage For="@(() => registerModel.Password)" />
    </div>

    <div class="mb-3">
        <label for="passwordAgain" class="form-label">Confirm Password</label>
        <InputText id="passwordAgain" type="password" class="form-control" @bind-Value="registerModel.PasswordAgain" />
        <ValidationMessage For="@(() => registerModel.PasswordAgain)" />
    </div>

    <button type="submit" class="btn btn-primary">Register</button>
</EditForm>

@code {
    private RegisterModel registerModel = new();

    private string? ErrorMessage;

    public class RegisterModel
    {
        [Required(ErrorMessage = "Username is required")]
        public string? UserName { get; set; }

        [Required(ErrorMessage = "Email is required")]
        [EmailAddress(ErrorMessage = "Invalid email address")]
        public string? Email { get; set; }

        [Required(ErrorMessage = "Password is required")]
        [MinLength(6, ErrorMessage = "Password must be at least 6 characters")]
        public string? Password { get; set; }

        [Required(ErrorMessage = "Please confirm your password")]
        [Compare("Password", ErrorMessage = "Passwords do not match")]
        public string? PasswordAgain { get; set; }
    }

    private void RegisterClicked()
    {
        ErrorMessage = null;

        var registerRequest = new RegisterRequest
        {
            UserName = registerModel.UserName!,
            Email = registerModel.Email!,
            Password = registerModel.Password!,
            PhoneNumber = null // Alleen 4 velden, telefoonnummer leeg laten
        };

        var response = AuthenticationService.Register(registerRequest);

        if (response.Success)
        {
            NavigationManager.NavigateTo("/");
        }
        else
        {
            ErrorMessage = "Registration failed. Please try again.";
        }
    }
}
